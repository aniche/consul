I" (function() {
  App.Map = {
    initialize: function() {
      var maps;
      maps = $('*[data-map]');
      if (maps.length > 0) {
        $.each(maps, function(index, map) {
          return App.Map.initializeMap(map);
        });
      }
      return $('.js-toggle-map').on({
        click: function() {
          return App.Map.toogleMap();
        }
      });
    },
    initializeMap: function(element) {
      var clearFormfields, createMarker, editable, latitudeInputSelector, longitudeInputSelector, map, mapAttribution, mapCenterLatLng, mapCenterLatitude, mapCenterLongitude, mapTilesProvider, marker, markerIcon, markerLatitude, markerLongitude, moveOrPlaceMarker, removeMarker, removeMarkerSelector, updateFormfields, zoom, zoomInputSelector;
      mapCenterLatitude = $(element).data('map-center-latitude');
      mapCenterLongitude = $(element).data('map-center-longitude');
      markerLatitude = $(element).data('marker-latitude');
      markerLongitude = $(element).data('marker-longitude');
      zoom = $(element).data('map-zoom');
      mapTilesProvider = $(element).data('map-tiles-provider');
      mapAttribution = $(element).data('map-tiles-provider-attribution');
      latitudeInputSelector = $(element).data('latitude-input-selector');
      longitudeInputSelector = $(element).data('longitude-input-selector');
      zoomInputSelector = $(element).data('zoom-input-selector');
      removeMarkerSelector = $(element).data('marker-remove-selector');
      editable = $(element).data('marker-editable');
      marker = null;
      markerIcon = L.divIcon({
        className: 'map-marker',
        iconSize: [30, 30],
        iconAnchor: [15, 40],
        html: '<div class="map-icon"></div>'
      });
      createMarker = function(latitude, longitude) {
        var markerLatLng;
        markerLatLng = new L.LatLng(latitude, longitude);
        marker = L.marker(markerLatLng, {
          icon: markerIcon,
          draggable: editable
        });
        if (editable) {
          marker.on('dragend', updateFormfields);
        }
        marker.addTo(map);
        return marker;
      };
      removeMarker = function(e) {
        e.preventDefault();
        if (marker) {
          map.removeLayer(marker);
          marker = null;
        }
        clearFormfields();
      };
      moveOrPlaceMarker = function(e) {
        if (marker) {
          marker.setLatLng(e.latlng);
        } else {
          marker = createMarker(e.latlng.lat, e.latlng.lng);
        }
        updateFormfields();
      };
      updateFormfields = function() {
        $(latitudeInputSelector).val(marker.getLatLng().lat);
        $(longitudeInputSelector).val(marker.getLatLng().lng);
        $(zoomInputSelector).val(map.getZoom());
      };
      clearFormfields = function() {
        $(latitudeInputSelector).val('');
        $(longitudeInputSelector).val('');
        $(zoomInputSelector).val('');
      };
      mapCenterLatLng = new L.LatLng(mapCenterLatitude, mapCenterLongitude);
      map = L.map(element.id).setView(mapCenterLatLng, zoom);
      L.tileLayer(mapTilesProvider, {
        attribution: mapAttribution
      }).addTo(map);
      if (markerLatitude && markerLongitude) {
        marker = createMarker(markerLatitude, markerLongitude);
      }
      if (editable) {
        $(removeMarkerSelector).on('click', removeMarker);
        map.on('zoomend', updateFormfields);
        return map.on('click', moveOrPlaceMarker);
      }
    },
    toogleMap: function() {
      $('.map').toggle();
      return $('.location-map-remove-marker-button').toggle();
    }
  };

}).call(this);
:ET